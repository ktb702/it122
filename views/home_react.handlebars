{{!--  
 Author: Kate Baldwin
 Course: IT122  (Week 6 - REACT & SPA's)
 File: home_react.handlebars
 Created: 09/22/2020
 Desc: Create a new React-based home page. Your new SPA page should:
    Show a list of the items in your database 
    Show item details when one is selected    

   //***** WEEK 7/8 ADJUSTMENTS: *****//

    A details form with the following;
        Entry fields for each item attribute;
        Fields are populated when the user selects an item from the master list,
        A 'Delete' button that deletes the current item from your database when clicked,
        A 'Clear' button to clear the form when clicked,
    Your master list should update to reflect database changes
    EXTRA CREDIT:
        Show a 'Save' button that saves edits into your database when clicked
--}}

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Cars React App</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">

    //create CarList component that displays a list of cars from the cars array
    const CarList = (props) => {
      return <div>
        <h1>Here is a list of cars currently available. Click on the model for more details.</h1>
        <ul>
          {props.items.map(item => <li onClick={props.clickHandler} key={item.model}>{item.model}</li>)}
        </ul>
      </div>
    }

    //create a CarDetail componenet that displays a details form for the car that has been selected
    const CarDetail = (props) => {
      return <div>
        <h2>Details for {props.item.model} :</h2>
        <form>
            <p>Year: <input type="text" name="year"   onChange={props.changeHandler} value={props.item.year || ""}></input></p>
            <p>Make: <input type="text" name="make"   onChange={props.changeHandler} value={props.item.make || ""}></input></p>
            <p>Model: <input type="text" name="model" onChange={props.changeHandler} value={props.item.model || ""}></input></p>
            <p>Color: <input type="text" name="color" onChange={props.changeHandler} value={props.item.color || ""}></input></p>
        </form>
        <button onClick={props.onSave} >Save</button> <br />
        <button onClick={props.onClear}>Clear Form</button> <br />
        <button onClick={props.onDelete} >Delete</button>
    </div>
    }

class CarApp extends React.Component{
      constructor(props){
          super(props);
          // Set initial state using data from server application
          this.state = {
            items: {{{ cars }}}, // cars array from mongo db passed from index.js
            currentCar: {}, // current selected item
          };

          // bind application state to click handler
          this.selectItem = this.selectItem.bind(this);
          this.onChange   = this.onChange.bind(this);
          this.onSave     = this.onSave.bind(this);
          this.onClear    = this.onClear.bind(this);
          this.onDelete   = this.onDelete.bind(this);
       }

      // handle list item clicked
      selectItem(event) {
        //console.log(event.target.innerText);
        let selected = event.target.innerText
        let newCar = this.state.items.find((item) => {
            return item.model == selected
        })
        this.setState({currentCar: newCar});
      }

      // handle any changes made in the details form field
      onChange(event){
        var newItem = this.state.currentCar;
        //console.log(event.target.name);
        newItem[event.target.name] = event.target.value;
        this.setState({currentCar: newItem});
      }
      
      // handle form save data
      onSave(){
          let newItem = this.state.currentCar;
          //console.log(newItem);
          fetch('/api/cars/' + newItem.model, {
              method: "POST",
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify(newItem)
          })
          .then((res) => {
              return res.json();
          })
          .then((items) => { //update the list of cars 
              //console.log(items);
              const newList = this.state.items
              if(!newItem._id){ //if item is new add to list, display new list, and clear the form
                newList.push(newItem);
                this.setState({ items: newList, currentCar: {} });
              }        
              else{ //if item was updated, just clear the form 
                  this.setState({currentCar: {} });
              }       
          })
          .catch(err => console.log(err))
      }
      
      // handle clear form
      onClear(){
        this.setState({currentCar: {} });
      }

      // handle delete form data
      onDelete(){
        let delItem = this.state.currentCar;
        fetch("api/delete/"+ delItem.model)
        .then((res) => {
            return res.json();
        })
        .then((items) => { //update the list of cars by removing delete item
            const newList = this.state.items.filter(items => items.model !== delItem.model)
            this.setState({ items: newList, currentCar: {} }); 
        })
        .catch(err => console.log(err))
      }

      render() {
        // render app UI elements
        return (
          <div>
            <h1>Welcome to the Car Shop! </h1>
            <CarList items={this.state.items} clickHandler={this.selectItem} />
            <CarDetail item={this.state.currentCar} changeHandler={this.onChange} onSave={this.onSave} onClear={this.onClear} onDelete={this.onDelete}/>
          </div>
          );
      }
    }
 
    ReactDOM.render(<CarApp />, document.getElementById('root'));

    </script>
  </body>
</html>